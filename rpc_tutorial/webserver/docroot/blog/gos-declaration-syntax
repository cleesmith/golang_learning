
<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Go&#39;s Declaration Syntax - The Go Blog</title>
	<link type="text/css" rel="stylesheet" href="/lib/godoc/style.css">
	<link rel="alternate" type="application/atom+xml" title="blog.golang.org - Atom Feed" href="//blog.golang.org/feed.atom" />
	<script type="text/javascript">window.initFuncs = [];</script>
	<style>
		#sidebar {
			float: right;
			padding-left: 20px;
			width: 250px;
			background: white;
		}
		#sidebar p, #sidebar ul {
			margin: 20px 5px;
		}
		#sidebar ul {
			padding: 0;
		}
		#sidebar li {
			list-style-type: none;
		}
		#content .author {
			font-style: italic;
		}
		#content .article {
			margin-bottom: 50px;
		}
		#content .date {
			color: #999;
		}
		#content .tags {
			color: #999;
			font-size: smaller;
		}
		#content .iframe, #content .image {
			margin: 20px;
		}
		#content .title {
			margin: 20px 0;
		}
	</style>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-3"]);
_gaq.push(["b._setAccount", "UA-49880327-6"]);
window.trackPageview = function() {
  _gaq.push(["_trackPageview", location.pathname+location.hash]);
  _gaq.push(["b._trackPageview", location.pathname+location.hash]);
};
window.trackPageview();
</script>
</head>
<body>

<div id="topbar"><div class="container">

<form method="GET" action="//golang.org/search">
<div id="menu">
<a href="//golang.org/doc/">Documents</a>
<a href="//golang.org/pkg/">Packages</a>
<a href="//golang.org/project/">The Project</a>
<a href="//golang.org/help/">Help</a>
<a href="/">Blog</a>
<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
</div>
<div id="heading"><a href="//golang.org/">The Go Programming Language</a></div>
</form>

</div></div>

<div id="page">
<div class="container">

<div id="sidebar">
	
		
			<h4>Next article</h4>
			<p><a href="/share-memory-by-communicating">Share Memory By Communicating</a></p>
		
		
		
			<h4>Previous article</h4>
			<p><a href="/go-programming-session-video-from">Go Programming session video from Google I/O</a></p>
		
	
	
	<h4>Links</h4>
	<ul>
	<li><a href='//golang.org/'>golang.org</a></li>
	<li><a href='//golang.org/doc/install.html'>Install Go</a></li>
	<li><a href='//tour.golang.org/'>A Tour of Go</a></li>
	<li><a href='//golang.org/doc/'>Go Documentation</a></li>
	<li><a href='//groups.google.com/group/golang-nuts'>Go Mailing List</a></li>
	<li><a href='//plus.google.com/101406623878176903605'>Go on Google+</a></li>
	<li><a href='//plus.google.com/112164155169467723645/posts'>Go+ Community</a></li>
	<li><a href='//twitter.com/golang'>Go on Twitter</a></li>
	</ul>
	
	<p><a href="/index">Blog index</a></p>
</div>

<div id="content">
	<h1><a href="/">The Go Blog</a></h1>
	
	
	<div class="article">
		<h3 class="title"><a href="/gos-declaration-syntax">Go&#39;s Declaration Syntax</a></h3>
		<p class="date">7 July 2010</p>
		

  
  
    
      
  <h4 id="TOC_1.">Introduction</h4>
  
  
  <p>
    Newcomers to Go wonder why the declaration syntax is different from the tradition established in the C family. In this post we&#39;ll compare the two approaches and explain why Go&#39;s declarations look as they do.
  </p>
  


    
      
  <h4 id="TOC_2.">C syntax</h4>
  
  
  <p>
    First, let&#39;s talk about C syntax. C took an unusual and clever approach to declaration syntax. Instead of describing the types with special syntax, one writes an expression involving the item being declared, and states what type that expression will have. Thus
  </p>
  

  
  <div class="code"><pre>int x;</pre></div>
  

  
  <p>
    declares x to be an int: the expression &#39;x&#39; will have type int. In general, to figure out how to write the type of a new variable, write an expression involving that variable that evaluates to a basic type, then put the basic type on the left and the expression on the right.
  </p>
  

  
  <p>
    Thus, the declarations
  </p>
  

  
  <div class="code"><pre>int *p;
int a[3];</pre></div>
  

  
  <p>
    state that p is a pointer to int because &#39;*p&#39; has type int, and that a is an array of ints because a[3] (ignoring the particular index value, which is punned to be the size of the array) has type int.
  </p>
  

  
  <p>
    What about functions? Originally, C&#39;s function declarations wrote the types of the arguments outside the parens, like this:
  </p>
  

  
  <div class="code"><pre>int main(argc, argv)
    int argc;
    char *argv[];
{ /* ... */ }</pre></div>
  

  
  <p>
    Again, we see that main is a function because the expression main(argc, argv) returns an int. In modern notation we&#39;d write
  </p>
  

  
  <div class="code"><pre>int main(int argc, char *argv[]) { /* ... */ }</pre></div>
  

  
  <p>
    but the basic structure is the same.
  </p>
  

  
  <p>
    This is a clever syntactic idea that works well for simple types but can get confusing fast. The famous example is declaring a function pointer. Follow the rules and you get this:
  </p>
  

  
  <div class="code"><pre>int (*fp)(int a, int b);</pre></div>
  

  
  <p>
    Here, fp is a pointer to a function because if you write the expression (*fp)(a, b) you&#39;ll call a function that returns int. What if one of fp&#39;s arguments is itself a function?
  </p>
  

  
  <div class="code"><pre>int (*fp)(int (*ff)(int x, int y), int b)</pre></div>
  

  
  <p>
    That&#39;s starting to get hard to read.
  </p>
  

  
  <p>
    Of course, we can leave out the name of the parameters when we declare a function, so main can be declared
  </p>
  

  
  <div class="code"><pre>int main(int, char *[])</pre></div>
  

  
  <p>
    Recall that argv is declared like this,
  </p>
  

  
  <div class="code"><pre>char *argv[]</pre></div>
  

  
  <p>
    so you drop the name from the middle of its declaration to construct its type. It&#39;s not obvious, though, that you declare something of type char *[] by putting its name in the middle.
  </p>
  

  
  <p>
    And look what happens to fp&#39;s declaration if you don&#39;t name the parameters:
  </p>
  

  
  <div class="code"><pre>int (*fp)(int (*)(int, int), int)</pre></div>
  

  
  <p>
    Not only is it not obvious where to put the name inside
  </p>
  

  
  <div class="code"><pre>int (*)(int, int)</pre></div>
  

  
  <p>
    it&#39;s not exactly clear that it&#39;s a function pointer declaration at all. And what if the return type is a function pointer?
  </p>
  

  
  <div class="code"><pre>int (*(*fp)(int (*)(int, int), int))(int, int)</pre></div>
  

  
  <p>
    It&#39;s hard even to see that this declaration is about fp.
  </p>
  

  
  <p>
    You can construct more elaborate examples but these should illustrate some of the difficulties that C&#39;s declaration syntax can introduce.
  </p>
  

  
  <p>
    There&#39;s one more point that needs to be made, though. Because type and declaration syntax are the same, it can be difficult to parse expressions with types in the middle. This is why, for instance, C casts always parenthesize the type, as in
  </p>
  

  
  <div class="code"><pre>(int)M_PI</pre></div>
  


    
      
  <h4 id="TOC_3.">Go syntax</h4>
  
  
  <p>
    Languages outside the C family usually use a distinct type syntax in declarations. Although it&#39;s a separate point, the name usually comes first, often followed by a colon. Thus our examples above become something like (in a fictional but illustrative language)
  </p>
  

  
  <div class="code"><pre>x: int
p: pointer to int
a: array[3] of int</pre></div>
  

  
  <p>
    These declarations are clear, if verbose - you just read them left to right. Go takes its cue from here, but in the interests of brevity it drops the colon and removes some of the keywords:
  </p>
  

  
  <div class="code"><pre>x int
p *int
a [3]int</pre></div>
  

  
  <p>
    There is no direct correspondence between the look of [3]int and how to use a in an expression. (We&#39;ll come back to pointers in the next section.) You gain clarity at the cost of a separate syntax.
  </p>
  

  
  <p>
    Now consider functions. Let&#39;s transcribe the declaration for main as it would read in Go, although the real main function in Go takes no arguments:
  </p>
  

  
  <div class="code"><pre>func main(argc int, argv []string) int</pre></div>
  

  
  <p>
    Superficially that&#39;s not much different from C, other than the change from <code>char</code> arrays to strings, but it reads well from left to right:
  </p>
  

  
  <p>
    function main takes an int and a slice of strings and returns an int.
  </p>
  

  
  <p>
    Drop the parameter names and it&#39;s just as clear - they&#39;re always first so there&#39;s no confusion.
  </p>
  

  
  <div class="code"><pre>func main(int, []string) int</pre></div>
  

  
  <p>
    One merit of this left-to-right style is how well it works as the types become more complex. Here&#39;s a declaration of a function variable (analogous to a function pointer in C):
  </p>
  

  
  <div class="code"><pre>f func(func(int,int) int, int) int</pre></div>
  

  
  <p>
    Or if f returns a function:
  </p>
  

  
  <div class="code"><pre>f func(func(int,int) int, int) func(int, int) int</pre></div>
  

  
  <p>
    It still reads clearly, from left to right, and it&#39;s always obvious which name is being declared - the name comes first.
  </p>
  

  
  <p>
    The distinction between type and expression syntax makes it easy to write and invoke closures in Go:
  </p>
  

  
  <div class="code"><pre>sum := func(a, b int) int { return a&#43;b } (3, 4)</pre></div>
  


    
      
  <h4 id="TOC_4.">Pointers</h4>
  
  
  <p>
    Pointers are the exception that proves the rule. Notice that in arrays and slices, for instance, Go&#39;s type syntax puts the brackets on the left of the type but the expression syntax puts them on the right of the expression:
  </p>
  

  
  <div class="code"><pre>var a []int
x = a[1]</pre></div>
  

  
  <p>
    For familiarity, Go&#39;s pointers use the * notation from C, but we could not bring ourselves to make a similar reversal for pointer types. Thus pointers work like this
  </p>
  

  
  <div class="code"><pre>var p *int
x = *p</pre></div>
  

  
  <p>
    We couldn&#39;t say
  </p>
  

  
  <div class="code"><pre>var p *int
x = p*</pre></div>
  

  
  <p>
    because that postfix * would conflate with multiplication. We could have used the Pascal ^, for example:
  </p>
  

  
  <div class="code"><pre>var p ^int
x = p^</pre></div>
  

  
  <p>
    and perhaps we should have (and chosen another operator for xor), because the prefix asterisk on both types and expressions complicates things in a number of ways. For instance, although one can write
  </p>
  

  
  <div class="code"><pre>[]int(&#34;hi&#34;)</pre></div>
  

  
  <p>
    as a conversion, one must parenthesize the type if it starts with a *:
  </p>
  

  
  <div class="code"><pre>(*int)(nil)</pre></div>
  

  
  <p>
    Had we been willing to give up * as pointer syntax, those parentheses would be unnecessary.
  </p>
  

  
  <p>
    So Go&#39;s pointer syntax is tied to the familiar C form, but those ties mean that we cannot break completely from using parentheses to disambiguate types and expressions in the grammar.
  </p>
  

  
  <p>
    Overall, though, we believe Go&#39;s type syntax is easier to understand than C&#39;s, especially when things get complicated.
  </p>
  


    
      
  <h4 id="TOC_5.">Notes</h4>
  
  
  <p>
    Go&#39;s declarations read left to right. It&#39;s been pointed out that C&#39;s read in a spiral! See <a href="http://c-faq.com/decl/spiral.anderson.html" target="_blank"> The &#34;Clockwise/Spiral Rule&#34;</a> by David Anderson.
  </p>
  


    
  


		
			<p class="author">By Rob Pike</p>
		
	</div>

	
		<h2>Related articles</h2>
		<ul>
		
			<li><a href="/two-recent-go-articles">Two recent Go articles</a></li>
		
			<li><a href="/two-recent-go-talks">Two recent Go talks</a></li>
		
			<li><a href="/go-videos-from-google-io-2012">Go videos from Google I/O 2012</a></li>
		
		</ul>
	

</div>

<div id="footer">
	<p>
	Except as
	<a href="https://developers.google.com/site-policies#restrictions">noted</a>,
	the content of this page is licensed under the Creative Commons
	Attribution 3.0 License,<br>
	and code is licensed under a <a href="//golang.org/LICENSE">BSD license</a>.<br>
	<a href="//golang.org/doc/tos.html">Terms of Service</a> | 
	<a href="//www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
	</p>
</div>

</div>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script src="/lib/godoc/jquery.js"></script>
<script src="/lib/godoc/playground.js"></script>
<script src="/lib/godoc/play.js"></script>
<script src="/lib/godoc/godocs.js"></script>
<script>
$(function() {
	
	$('.playground > pre.numbers, .code > pre.numbers').each(function() {
		var $spans = $(this).find('> span');

		
		var max = 0;
		$spans.each(function() {
			var n = $(this).attr('num')*1;
			if (n > max) max = n;
		});
		var width = 2;
		while (max > 10) {
			max = max / 10;
			width++;
		}

		
		$spans.each(function() {
			var n = $(this).attr('num')+' ';
			while (n.length < width) n = ' '+n;
			$('<span class="number">').text(n).insertBefore(this);
		});
	});

	initPlayground(new HTTPTransport());
});
</script>
</html>
